/* Generated By:JJTree&JavaCC: Do not edit this line. grammarConstants.java */
package language;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface grammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMPARATEUR = 6;
  /** RegularExpression Id. */
  int BOOLEEN = 7;
  /** RegularExpression Id. */
  int START = 8;
  /** RegularExpression Id. */
  int END = 9;
  /** RegularExpression Id. */
  int ENTETE = 10;
  /** RegularExpression Id. */
  int AFFEC = 11;
  /** RegularExpression Id. */
  int ENDL = 12;
  /** RegularExpression Id. */
  int TYPE = 13;
  /** RegularExpression Id. */
  int RETURN = 14;
  /** RegularExpression Id. */
  int IF = 15;
  /** RegularExpression Id. */
  int ELSEIF = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int WHILE = 18;
  /** RegularExpression Id. */
  int FOR = 19;
  /** RegularExpression Id. */
  int PARSTART = 20;
  /** RegularExpression Id. */
  int PAREND = 21;
  /** RegularExpression Id. */
  int ACCSTART = 22;
  /** RegularExpression Id. */
  int ACCEND = 23;
  /** RegularExpression Id. */
  int LOG = 24;
  /** RegularExpression Id. */
  int MINUS = 25;
  /** RegularExpression Id. */
  int PLUS = 26;
  /** RegularExpression Id. */
  int VIR = 27;
  /** RegularExpression Id. */
  int ZERO = 28;
  /** RegularExpression Id. */
  int POINT = 29;
  /** RegularExpression Id. */
  int NOT = 30;
  /** RegularExpression Id. */
  int COMSTART = 31;
  /** RegularExpression Id. */
  int COMEND = 32;
  /** RegularExpression Id. */
  int FUN = 33;
  /** RegularExpression Id. */
  int ENDFUN = 34;
  /** RegularExpression Id. */
  int GUI = 35;
  /** RegularExpression Id. */
  int CHIFFRE = 36;
  /** RegularExpression Id. */
  int CHIFFREBIS = 37;
  /** RegularExpression Id. */
  int IDENTIFIER = 38;
  /** RegularExpression Id. */
  int SYMBOLE = 39;
  /** RegularExpression Id. */
  int ALPHABET = 40;
  /** RegularExpression Id. */
  int ALPHABETNUM = 41;
  /** RegularExpression Id. */
  int ALPHABETSPE = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<COMPARATEUR>",
    "<BOOLEEN>",
    "\"STARTCODE\"",
    "\"ENDCODE\"",
    "\"//\"",
    "\"<--\"",
    "\";\"",
    "<TYPE>",
    "\"return\"",
    "\"if\"",
    "\"else if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "<LOG>",
    "\"-\"",
    "\"+\"",
    "\",\"",
    "\"0\"",
    "\".\"",
    "\"NOT\"",
    "\"/*\"",
    "\"*/\"",
    "\"FUN\"",
    "\"ENDFUN\"",
    "\"\\\"\"",
    "<CHIFFRE>",
    "<CHIFFREBIS>",
    "<IDENTIFIER>",
    "<SYMBOLE>",
    "<ALPHABET>",
    "<ALPHABETNUM>",
    "<ALPHABETSPE>",
  };

}
