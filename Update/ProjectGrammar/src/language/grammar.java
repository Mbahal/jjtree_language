/* Generated By:JJTree&JavaCC: Do not edit this line. grammar.java */
package language;

public class grammar/*@bgen(jjtree)*/implements grammarTreeConstants, grammarConstants {/*@bgen(jjtree)*/
  protected static JJTgrammarState jjtree = new JJTgrammarState();public static void main(String args [])
  {
    if(args.length == 0) {
                java.nio.file.Path currentRelativePath = java.nio.file.Paths.get("");
                String path = currentRelativePath.toAbsolutePath().toString()+"\u005c\u005csrc\u005c\u005clanguage\u005c\u005cprogram.txt";

                System.out.println("Reading from file programme.txt...");
            //new grammar(System.in);
            try {
                  new grammar(new java.io.FileInputStream(path));
        }catch(Exception e) {
                System.out.println(e.getMessage());
                return;
    }
  }else {
                System.out.print("File analysis :"+args[0]);
                try {
                        new grammar(new java.io.FileInputStream(args[0]));
                }catch(Exception e) {
                        System.out.println(e.getMessage());
                        return;
                }
    }
    try{
      SimpleNode n = grammar.Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch(Exception e){
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ENTETE);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ENTETE);
      BlocDec("main");
        java.util.ArrayList<Variable> listVariables = Variable.getVariables();
        for(Variable var : listVariables) {
                        System.out.println("Global variable "+var.getId()+" from type "+var.getType()+" created.Defined: "+var.getDefined());
        }
      jj_consume_token(FUN);
      BlocSousProgramme();
                java.util.ArrayList<Function> listFunctions = Function.getFunctions();
                for(Function fun : listFunctions) {
                        System.out.print("Function "+fun.getId()+" return type "+fun.getType()+" taking ");
                        java.util.ArrayList<Parameter> listParameters = fun.getParameters();
                        for(int i=0;i<listParameters.size();i++) {
                                System.out.print(listParameters.get(i).getType()+" ");
                        }
                        System.out.println("argument(s)"+" added in the symbol table");
        }
      jj_consume_token(ENDFUN);
      BlocPrincipal();
    {if (true) return jjtn000;}
      jj_consume_token(0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Empty() throws ParseException {
 /*@bgen(jjtree) Empty */
  SimpleNode jjtn000 = new SimpleNode(JJTEMPTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;

    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BlocDec(String scope) throws ParseException {
 /*@bgen(jjtree) BlocDec */
 SimpleNode jjtn000 = new SimpleNode(JJTBLOCDEC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type; String id; Variable var; String suite; java.util.ArrayList<Variable> listOfVariables;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        type = type(scope);
        id = id(scope);
        suite = SuiteBlocDec(scope);
        jj_consume_token(ENDL);
                if(!suite.equals(type) && !suite.equals("")) {
                        {if (true) throw new RuntimeException("Incompatible types for "+id+" : "+suite+" differs from "+type+" in "+scope);}
                }
                var = new Variable(type,id);
                var.setScope(scope);
                if(!suite.equals("")) {
                        var.setDefined(true);
                }
                listOfVariables = Variable.getVariables();
                for(Variable temp : listOfVariables) {
                        if(temp.getId().equals(id)) {
                                if(temp.getScope().equals("main") || temp.getScope().equals(var.getScope())) {
                                        {if (true) throw new RuntimeException("Variable "+id+" already defined in scope or beyond");}
                                }
                        }
                }
                if(!scope.equals("main")) {
                        Function fun = Function.getFunction(scope);
                        java.util.ArrayList<Parameter> listOfParameters = fun.getParameters();
                        for(Parameter par : listOfParameters) {
                                if(par.getId().equals(id)) {
                                        {if (true) throw new RuntimeException("A parameter of the function "+scope+" has the same id :"+id);}
                                }
                        }
                }
                listOfVariables.add(var);
        BlocDec(scope);
        break;
      default:
        jj_la1[0] = jj_gen;
        Empty();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public String SuiteBlocDec(String scope) throws ParseException {
 /*@bgen(jjtree) SuiteBlocDec */
 SimpleNode jjtn000 = new SimpleNode(JJTSUITEBLOCDEC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type="";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AFFEC:
        jj_consume_token(AFFEC);
        type = Valeur(scope);
        break;
      default:
        jj_la1[1] = jj_gen;
        Empty();
      }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           {if (true) return type;}
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void BlocPrincipal() throws ParseException {
 /*@bgen(jjtree) BlocPrincipal */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCPRINCIPAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START);
      BlocInstruction("main");
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void BlocSousProgramme() throws ParseException {
 /*@bgen(jjtree) BlocSousProgramme */
 SimpleNode jjtn000 = new SimpleNode(JJTBLOCSOUSPROGRAMME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Function fun;
    try {
      if (jj_2_1(3)) {
        fun = Procedure("main");
                            System.out.println(fun.getId()+" added");
        BlocSousProgramme();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TYPE:
          fun = Function("main");
                             System.out.println(fun.getId()+" added");
          BlocSousProgramme();
          break;
        default:
          jj_la1[2] = jj_gen;
          Empty();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public String Valeur(String scope) throws ParseException {
 /*@bgen(jjtree) Valeur */
 SimpleNode jjtn000 = new SimpleNode(JJTVALEUR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type;
    try {
      if (jj_2_2(3)) {
        type = ExpAr(scope);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                    {if (true) return type;}
      } else if (jj_2_3(3)) {
        type = ExpLog(scope);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     {if (true) return type;}
      } else if (jj_2_4(3)) {
        type = ExpString(scope);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                         {if (true) return type;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void BlocInstruction(String scope) throws ParseException {
 /*@bgen(jjtree) BlocInstruction */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case IDENTIFIER:
        Instruction(scope);
        BlocInstruction(scope);
        break;
      default:
        jj_la1[3] = jj_gen;
        Empty();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Instruction(String scope) throws ParseException {
 /*@bgen(jjtree) Instruction */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(2)) {
        AppelProcedure(scope);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Affectation(scope);
          break;
        case WHILE:
        case FOR:
          Boucle(scope);
          break;
        case IF:
          Condition(scope);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AppelProcedure(String scope) throws ParseException {
 /*@bgen(jjtree) AppelProcedure */
 SimpleNode jjtn000 = new SimpleNode(JJTAPPELPROCEDURE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);java.util.ArrayList<String> arg; String id; java.util.ArrayList<Function> listFunctions = new java.util.ArrayList<Function>();
    try {
      id = id(scope);
      jj_consume_token(PARSTART);
      arg = Arg(scope);
      jj_consume_token(PAREND);
      jj_consume_token(ENDL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         System.out.println(id+" called in "+scope);
                listFunctions = Function.listOfFunctions;
                for(Function temp : listFunctions) {
                        if(temp.getId().equals(id)) {
                                if(!temp.getType().equals("void")) {
                                        {if (true) throw new RuntimeException(id+" is not a procedure "+scope);}
                                }else {
                                        if(temp.getParameters().size() != arg.size()) {
                                                {if (true) throw new RuntimeException("Procedure "+id+" without same parameter length in "+scope);}
                                        }
                                        for(int j=0;j<temp.getParameters().size();j++) {
                                                if(!temp.getParameters().get(j).getType().equals(arg.get(j))) {
                                                        {if (true) throw new RuntimeException("Incompatible parameter types for "+id+" in "+scope);}
                                                }
                                        }
                                }{if (true) return;}
                        }
                }{if (true) throw new RuntimeException("Unknown procedure "+id+" in "+scope);}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public java.util.ArrayList<String> Arg(String scope) throws ParseException {
 /*@bgen(jjtree) Arg */
 SimpleNode jjtn000 = new SimpleNode(JJTARG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type; java.util.ArrayList<String> arg = new java.util.ArrayList<String>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEEN:
      case PARSTART:
      case MINUS:
      case ZERO:
      case NOT:
      case GUI:
      case CHIFFRE:
      case IDENTIFIER:
        type = Valeur(scope);
        arg = SuiteArg(scope);
                                                             arg.add(0,type);
        break;
      default:
        jj_la1[5] = jj_gen;
        Empty();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return arg;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public java.util.ArrayList<String> SuiteArg(String scope) throws ParseException {
 /*@bgen(jjtree) SuiteArg */
 SimpleNode jjtn000 = new SimpleNode(JJTSUITEARG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);java.util.ArrayList<String> arg = new java.util.ArrayList<String>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIR:
        jj_consume_token(VIR);
        arg = Arg(scope);
        break;
      default:
        jj_la1[6] = jj_gen;
        Empty();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return arg;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Affectation(String scope) throws ParseException {
 /*@bgen(jjtree) Affectation */
 SimpleNode jjtn000 = new SimpleNode(JJTAFFECTATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String id; String val; java.util.ArrayList<Variable> listOfVariables = new java.util.ArrayList<Variable>();
    try {
      id = id(scope);
      jj_consume_token(AFFEC);
      val = Valeur(scope);
      jj_consume_token(ENDL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          listOfVariables = Variable.getVariables();
                for(Variable var : listOfVariables) {
                        if(var.getId().equals(id)) {
                                if(!var.getType().equals(val)) {
                                        {if (true) throw new RuntimeException("Incompatible types for "+id+" : "+var.getType()+" differs from "+val+" in "+scope);}
                                }
                                if(var.getScope().equals("main") || var.getScope().equals(scope)) {
                                        var.setDefined(true);
                                        {if (true) return;}
                                }
                        }
                }{if (true) throw new RuntimeException("Variable "+id+" not declared in "+scope);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Boucle(String scope) throws ParseException {
 /*@bgen(jjtree) Boucle */
  SimpleNode jjtn000 = new SimpleNode(JJTBOUCLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(PARSTART);
        ExpLog(scope);
        jj_consume_token(PAREND);
        jj_consume_token(ACCSTART);
        BlocInstruction(scope);
        jj_consume_token(ACCEND);
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(PARSTART);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(VIR);
        Entier(scope);
        jj_consume_token(VIR);
        Entier(scope);
        jj_consume_token(PAREND);
        jj_consume_token(ACCSTART);
        BlocInstruction(scope);
        jj_consume_token(ACCEND);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Condition(String scope) throws ParseException {
 /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(PARSTART);
      ExpLog(scope);
      jj_consume_token(PAREND);
      jj_consume_token(ACCSTART);
      BlocInstruction(scope);
      jj_consume_token(ACCEND);
      SuiteCondition(scope);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void SuiteCondition(String scope) throws ParseException {
 /*@bgen(jjtree) SuiteCondition */
  SimpleNode jjtn000 = new SimpleNode(JJTSUITECONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        jj_consume_token(ELSEIF);
        jj_consume_token(PARSTART);
        ExpLog(scope);
        jj_consume_token(PAREND);
        jj_consume_token(ACCSTART);
        BlocInstruction(scope);
        jj_consume_token(ACCEND);
        SuiteCondition(scope);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(ACCSTART);
        BlocInstruction(scope);
        jj_consume_token(ACCEND);
        break;
      default:
        jj_la1[8] = jj_gen;
        Empty();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public String ExpAr(String scope) throws ParseException {
 /*@bgen(jjtree) ExpAr */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type; String type2 ="";
    try {
      type = Mult(scope);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case PLUS:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        type2 = Mult(scope);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          if(!type.equals(type2) && !type2.equals("")) {
                        {if (true) throw new RuntimeException("Types not compatible in "+scope);}
                }
                {if (true) return type;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Mult(String scope) throws ParseException {
 /*@bgen(jjtree) Mult */
 SimpleNode jjtn000 = new SimpleNode(JJTMULT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type; String type2 ="";
    try {
      type = Unary(scope);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SYMBOLE:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_2;
        }
        jj_consume_token(SYMBOLE);
        type2 = Unary(scope);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if(!type.equals(type2) && !type2.equals("")) {
                        {if (true) throw new RuntimeException("Types not compatible in "+scope);}
                }
                {if (true) return type;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Unary(String scope) throws ParseException {
 /*@bgen(jjtree) Unary */
 SimpleNode jjtn000 = new SimpleNode(JJTUNARY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type;
    try {
      PreUnary();
      type = Element(scope);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return type;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void PreUnary() throws ParseException {
 /*@bgen(jjtree) PreUnary */
  SimpleNode jjtn000 = new SimpleNode(JJTPREUNARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[12] = jj_gen;
        Empty();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public String Element(String scope) throws ParseException {
 /*@bgen(jjtree) Element */
 SimpleNode jjtn000 = new SimpleNode(JJTELEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type; String id;java.util.ArrayList<Variable> listVariables;java.util.ArrayList<Parameter> listOfParameters;
    try {
      if (jj_2_6(2)) {
        type = Reel(scope);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    {if (true) return type;}
      } else if (jj_2_7(2)) {
        type = AppelFunction(scope);
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                             {if (true) return type;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARSTART:
          jj_consume_token(PARSTART);
          type = ExpAr(scope);
          jj_consume_token(PAREND);
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                                {if (true) return type;}
          break;
        case IDENTIFIER:
          id = id(scope);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
    listVariables = Variable.getVariables();
                        for(Variable var : listVariables) {
                                if(var.getId().equals(id) && (var.getScope().equals("main") || var.getScope().equals(scope))) {
                                        if(!var.getType().equals("real") && !var.getType().equals("int")) {
                                                {if (true) throw new RuntimeException("Incompatible types for "+id+" : "+var.getType()+" differs from real|int in "+scope);}
                                        }
                                        if(!var.getDefined()) {
                                                {if (true) throw new RuntimeException("Variable "+id+" is not defined");}
                                        }
                                        {if (true) return var.getType();}
                                }
                        }
                        if(!scope.equals("main")) {
                                Function fun = Function.getFunction(scope);
                                for(Parameter par : fun.getParameters()) {
                                        if(par.getId().equals(id)) {
                                                if(!par.getType().equals("real") && !par.getType().equals("int")) {
                                                        {if (true) throw new RuntimeException("Incompatible types for "+id+" : "+par.getType()+" differs from real|int in "+scope);}
                                                }
                                                {if (true) return par.getType();}
                                        }
                                }
                        }{if (true) throw new RuntimeException("Unknown variable or parameter "+id+" in scope "+scope);}
          break;
        case ZERO:
        case CHIFFRE:
          type = Entier(scope);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         {if (true) return type;}
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String AppelFunction(String scope) throws ParseException {
 /*@bgen(jjtree) AppelFunction */
 SimpleNode jjtn000 = new SimpleNode(JJTAPPELFUNCTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String id; java.util.ArrayList<String> arg;java.util.ArrayList<Function> listFunctions = new java.util.ArrayList<Function>();
    try {
      id = id(scope);
      jj_consume_token(PARSTART);
      arg = Arg(scope);
      jj_consume_token(PAREND);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         System.out.println(id+" called in "+scope);
                listFunctions = Function.listOfFunctions;
                for(Function temp : listFunctions) {
                        if(temp.getId().equals(id)) {
                                if(temp.getType().equals("void")) {
                                        {if (true) throw new RuntimeException(id+" is not a Function in "+scope);}
                                }else {
                                        if(temp.getParameters().size() != arg.size()) {
                                                {if (true) throw new RuntimeException("Function "+id+" without same parameter length "+scope);}
                                        }
                                        for(int j=0;j<temp.getParameters().size();j++) {
                                                if(!temp.getParameters().get(j).getType().equals(arg.get(j))) {
                                                        {if (true) throw new RuntimeException("Incompatible parameter types for "+id+" in "+scope);}
                                                }
                                        }
                                }{if (true) return temp.getType();}
                        }
                }{if (true) throw new RuntimeException("Unknown Function "+id+" in "+scope);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Entier(String scope) throws ParseException {
 /*@bgen(jjtree) Entier */
  SimpleNode jjtn000 = new SimpleNode(JJTENTIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHIFFRE:
        jj_consume_token(CHIFFRE);
        break;
      case ZERO:
        jj_consume_token(ZERO);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return "int";}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Reel(String scope) throws ParseException {
 /*@bgen(jjtree) Reel */
  SimpleNode jjtn000 = new SimpleNode(JJTREEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Entier(scope);
      jj_consume_token(POINT);
      SuiteReel(scope);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return "real";}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void SuiteReel(String scope) throws ParseException {
 /*@bgen(jjtree) SuiteReel */
  SimpleNode jjtn000 = new SimpleNode(JJTSUITEREEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHIFFREBIS:
        jj_consume_token(CHIFFREBIS);
        break;
      case ZERO:
        jj_consume_token(ZERO);
        break;
      case CHIFFRE:
        jj_consume_token(CHIFFRE);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public String ExpLog(String scope) throws ParseException {
 /*@bgen(jjtree) ExpLog */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPLOG);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type; String type2="" ;
    try {
      type = UnaryL(scope);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LOG:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_3;
        }
        jj_consume_token(LOG);
        type2 = UnaryL(scope);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return type;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String UnaryL(String scope) throws ParseException {
 /*@bgen(jjtree) UnaryL */
 SimpleNode jjtn000 = new SimpleNode(JJTUNARYL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEEN:
      case PARSTART:
      case MINUS:
      case ZERO:
      case CHIFFRE:
      case IDENTIFIER:
        type = ElementL(scope);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 {if (true) return type;}
        break;
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(PARSTART);
        type = ElementL(scope);
        jj_consume_token(PAREND);
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                   {if (true) return type;}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String ElementL(String scope) throws ParseException {
 /*@bgen(jjtree) ElementL */
 SimpleNode jjtn000 = new SimpleNode(JJTELEMENTL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String id; String typefun; String type;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEEN:
        type = booleen(scope);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                {if (true) return type;}
        break;
      default:
        jj_la1[18] = jj_gen;
        if (jj_2_8(3)) {
          type = Test(scope);
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                            {if (true) return type;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PARSTART:
            jj_consume_token(PARSTART);
            type = ExpLog(scope);
            jj_consume_token(PAREND);
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                         {if (true) return type;}
            break;
          default:
            jj_la1[19] = jj_gen;
            if (jj_2_9(2)) {
              typefun = AppelFunction(scope);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 System.out.println(typefun+ "called");
                  if(!typefun.equals("boolean")) {
                                {if (true) throw new RuntimeException("Incompatible types "+typefun+" differs from boolean in "+scope);}
                        }
                        {if (true) return typefun;}
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENTIFIER:
                id = id(scope);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                    java.util.ArrayList<Variable> listVariables = Variable.getVariables();
                        for(Variable var : listVariables) {
                                if(var.getId().equals(id) && (var.getScope().equals("main") || var.getScope().equals(scope))) {
                                        if(!var.getType().equals("boolean")) {
                                                {if (true) throw new RuntimeException("Incompatible types for "+id+" : "+var.getType()+" differs from boolean in "+scope);}
                                        }
                                        if(!var.getDefined()) {
                                                {if (true) throw new RuntimeException("Variable "+id+" is not defined");}
                                        }
                                        {if (true) return var.getType();}
                                }
                        }
                        if(!scope.equals("main")) {
                                Function fun = Function.getFunction(scope);
                                java.util.ArrayList<Parameter> listOfParameters = fun.getParameters();
                                for(Parameter par : listOfParameters) {
                                        if(par.getId().equals(id)) {
                                                if(!par.getType().equals("boolean")) {
                                                        {if (true) throw new RuntimeException("Incompatible types for "+id+" : "+par.getType()+" differs from boolean in "+scope);}
                                                }
                                                {if (true) return par.getType();}
                                        }
                                }
                        }
                        {if (true) throw new RuntimeException("Unknown variable or parameter "+id+" in scope "+scope);}
                break;
              default:
                jj_la1[20] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String booleen(String scope) throws ParseException {
 /*@bgen(jjtree) booleen */
 SimpleNode jjtn000 = new SimpleNode(JJTBOOLEEN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type;
    try {
      jj_consume_token(BOOLEEN);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return "boolean";}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String Test(String scope) throws ParseException {
 /*@bgen(jjtree) Test */
  SimpleNode jjtn000 = new SimpleNode(JJTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExpAr(scope);
      jj_consume_token(COMPARATEUR);
      ExpAr(scope);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return "boolean";}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String ExpString(String scope) throws ParseException {
 /*@bgen(jjtree) ExpString */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type;
    try {
      type = string(scope);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_4;
        }
        jj_consume_token(PLUS);
        string(scope);
      }
                                                         jjtree.closeNodeScope(jjtn000, true);
                                                         jjtc000 = false;
                                                         {if (true) return type;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String string(String scope) throws ParseException {
 /*@bgen(jjtree) string */
 SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type; String id; String typefun;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GUI:
        jj_consume_token(GUI);
        id = id(scope);
        jj_consume_token(GUI);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       {if (true) return "string";}
        break;
      default:
        jj_la1[22] = jj_gen;
        if (jj_2_10(2)) {
          typefun = AppelFunction(scope);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 System.out.println(typefun+ "called");
                  if(!typefun.equals("string")) {
                                {if (true) throw new RuntimeException("Incompatible types "+typefun+" differs from string in "+scope);}
                        }
                        {if (true) return typefun;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            id = id(scope);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                    java.util.ArrayList<Variable> listVariables = Variable.getVariables();
                        for(Variable var : listVariables) {
                                if(var.getId().equals(id) && (var.getScope().equals("main") || var.getScope().equals(scope))) {
                                        if(!var.getType().equals("string")) {
                                                {if (true) throw new RuntimeException("Incompatible types for "+id+" : "+var.getType()+" differs from string in "+scope);}
                                        }
                                        if(!var.getDefined()) {
                                                {if (true) throw new RuntimeException("Variable "+id+" is not defined");}
                                        }
                                        {if (true) return var.getType();}
                                }
                        }
                        if(!scope.equals("main")) {
                                Function fun = Function.getFunction(scope);
                                java.util.ArrayList<Parameter> listOfParameters = fun.getParameters();
                                for(Parameter par : listOfParameters) {
                                        if(par.getId().equals(id)) {
                                                if(!par.getType().equals("string")) {
                                                        {if (true) throw new RuntimeException("Incompatible types for "+id+" : "+par.getType()+" differs from string in "+scope);}
                                                }
                                                {if (true) return par.getType();}
                                        }
                                }
                        }
                        {if (true) throw new RuntimeException("Unknown variable or parameter "+id+" in scope "+scope);}
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Function Function(String scope) throws ParseException {
 /*@bgen(jjtree) Function */
 SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type; String id; java.util.ArrayList<Parameter> param; Function fun; String ret;
    try {
      type = type(scope);
      id = id(scope);
      jj_consume_token(PARSTART);
                                                   System.out.println(id+" created");  fun = new Function(id, type);
      param = Param(scope);
                                       fun.setParameters(param); Function.getFunctions().add(fun);
      jj_consume_token(PAREND);
      jj_consume_token(ACCSTART);
      Body(id);
      jj_consume_token(RETURN);
      ret = Valeur(id);
      jj_consume_token(ENDL);
      jj_consume_token(ACCEND);
                                  if(!ret.equals(type)) {
                                        {if (true) throw new RuntimeException("Return type function incompatible in "+scope);}
                                  }
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         {if (true) return fun;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String type(String scope) throws ParseException {
 /*@bgen(jjtree) type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TYPE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return token.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String id(String scope) throws ParseException {
 /*@bgen(jjtree) id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return token.image;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public java.util.ArrayList<Parameter> Param(String scope) throws ParseException {
 /*@bgen(jjtree) Param */
 SimpleNode jjtn000 = new SimpleNode(JJTPARAM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String type; java.util.ArrayList<Parameter> list = new java.util.ArrayList<Parameter>(); String id;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPE:
        type = type(scope);
        id = id(scope);
        list = SuiteParam(scope);
      Parameter arg = new Parameter(type,id);
      arg.setScope(scope);
      for(Variable var : Variable.getVariables()) {
                if(var.getScope().equals("main") && arg.getId().equals(var.getId())) {
                        {if (true) throw new RuntimeException("Parameter "+id+" unsetable : global variable has the same name");}
                }
      }
      list.add(0,arg);
        break;
      default:
        jj_la1[24] = jj_gen;
        Empty();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return list;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public java.util.ArrayList<Parameter> SuiteParam(String scope) throws ParseException {
 /*@bgen(jjtree) SuiteParam */
 SimpleNode jjtn000 = new SimpleNode(JJTSUITEPARAM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);java.util.ArrayList<Parameter> list = new java.util.ArrayList<Parameter>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIR:
        jj_consume_token(VIR);
        list = Param(scope);
        break;
      default:
        jj_la1[25] = jj_gen;
        Empty();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return list;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Body(String scope) throws ParseException {
 /*@bgen(jjtree) Body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BlocDec(scope);
      BlocInstruction(scope);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public Function Procedure(String scope) throws ParseException {
 /*@bgen(jjtree) Procedure */
 SimpleNode jjtn000 = new SimpleNode(JJTPROCEDURE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);String id; java.util.ArrayList<Parameter> param; Function fun;
    try {
      id = id(scope);
      jj_consume_token(PARSTART);
                                    System.out.println(id +" created");  fun = new Function(id, "void");
      param = Param(scope);
                                       fun.setParameters(param); Function.getFunctions().add(fun);
      jj_consume_token(PAREND);
      jj_consume_token(ACCSTART);
      Body(id);
      jj_consume_token(ACCEND);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         {if (true) return fun;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_3R_23() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(COMPARATEUR)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(BOOLEEN)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(PARSTART)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(PARSTART)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(LOG)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(PARSTART)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(PAREND)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(NOT)) return true;
    if (jj_scan_token(PARSTART)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(PARSTART)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(SYMBOLE)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(PARSTART)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(PAREND)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_17()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(GUI)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(GUI)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(POINT)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public grammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x800,0x2000,0xc8000,0xc8000,0x52100080,0x8000000,0xc0000,0x30000,0x6000000,0x6000000,0x0,0x2000000,0x10100000,0x10000000,0x10000000,0x1000000,0x52100080,0x80,0x100000,0x0,0x4000000,0x0,0x0,0x2000,0x8000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x40,0x40,0x58,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x50,0x10,0x30,0x0,0x50,0x0,0x0,0x40,0x0,0x8,0x40,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public grammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public grammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new grammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public grammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new grammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public grammar(grammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(grammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
